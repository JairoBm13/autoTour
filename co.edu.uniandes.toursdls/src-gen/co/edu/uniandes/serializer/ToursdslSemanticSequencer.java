/*
 * generated by Xtext 2.12.0
 */
package co.edu.uniandes.serializer;

import co.edu.uniandes.services.ToursdslGrammarAccess;
import co.edu.uniandes.toursdsl.Coordenada;
import co.edu.uniandes.toursdsl.Hotspot;
import co.edu.uniandes.toursdsl.Panorama;
import co.edu.uniandes.toursdsl.Tour;
import co.edu.uniandes.toursdsl.ToursdslPackage;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ToursdslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ToursdslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ToursdslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ToursdslPackage.COORDENADA:
				sequence_Coordenada(context, (Coordenada) semanticObject); 
				return; 
			case ToursdslPackage.HOTSPOT:
				sequence_Hotspot(context, (Hotspot) semanticObject); 
				return; 
			case ToursdslPackage.PANORAMA:
				sequence_Panorama(context, (Panorama) semanticObject); 
				return; 
			case ToursdslPackage.TOUR:
				sequence_Tour(context, (Tour) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Coordenada returns Coordenada
	 *
	 * Constraint:
	 *     (x=INT y=INT z=INT)
	 */
	protected void sequence_Coordenada(ISerializationContext context, Coordenada semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ToursdslPackage.Literals.COORDENADA__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursdslPackage.Literals.COORDENADA__X));
			if (transientValues.isValueTransient(semanticObject, ToursdslPackage.Literals.COORDENADA__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursdslPackage.Literals.COORDENADA__Y));
			if (transientValues.isValueTransient(semanticObject, ToursdslPackage.Literals.COORDENADA__Z) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursdslPackage.Literals.COORDENADA__Z));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCoordenadaAccess().getXINTTerminalRuleCall_3_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getCoordenadaAccess().getYINTTerminalRuleCall_9_0(), semanticObject.getY());
		feeder.accept(grammarAccess.getCoordenadaAccess().getZINTTerminalRuleCall_15_0(), semanticObject.getZ());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Hotspot returns Hotspot
	 *
	 * Constraint:
	 *     (name=ID destino=[Panorama|ID] origen=[Panorama|ID] posicion=Coordenada rotacion=Coordenada)
	 */
	protected void sequence_Hotspot(ISerializationContext context, Hotspot semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ToursdslPackage.Literals.HOTSPOT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursdslPackage.Literals.HOTSPOT__NAME));
			if (transientValues.isValueTransient(semanticObject, ToursdslPackage.Literals.HOTSPOT__DESTINO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursdslPackage.Literals.HOTSPOT__DESTINO));
			if (transientValues.isValueTransient(semanticObject, ToursdslPackage.Literals.HOTSPOT__ORIGEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursdslPackage.Literals.HOTSPOT__ORIGEN));
			if (transientValues.isValueTransient(semanticObject, ToursdslPackage.Literals.HOTSPOT__POSICION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursdslPackage.Literals.HOTSPOT__POSICION));
			if (transientValues.isValueTransient(semanticObject, ToursdslPackage.Literals.HOTSPOT__ROTACION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursdslPackage.Literals.HOTSPOT__ROTACION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHotspotAccess().getNameIDTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getHotspotAccess().getDestinoPanoramaIDTerminalRuleCall_10_0_1(), semanticObject.eGet(ToursdslPackage.Literals.HOTSPOT__DESTINO, false));
		feeder.accept(grammarAccess.getHotspotAccess().getOrigenPanoramaIDTerminalRuleCall_16_0_1(), semanticObject.eGet(ToursdslPackage.Literals.HOTSPOT__ORIGEN, false));
		feeder.accept(grammarAccess.getHotspotAccess().getPosicionCoordenadaParserRuleCall_21_0(), semanticObject.getPosicion());
		feeder.accept(grammarAccess.getHotspotAccess().getRotacionCoordenadaParserRuleCall_25_0(), semanticObject.getRotacion());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Panorama returns Panorama
	 *
	 * Constraint:
	 *     (name=ID description=STRING places+=Hotspot places+=Hotspot*)
	 */
	protected void sequence_Panorama(ISerializationContext context, Panorama semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tour returns Tour
	 *
	 * Constraint:
	 *     (name=ID places+=Panorama COMMAplaces+=Panorama*)
	 */
	protected void sequence_Tour(ISerializationContext context, Tour semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
