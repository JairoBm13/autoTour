/*
 * generated by Xtext 2.12.0
 */
package co.edu.uniandes.tours.serializer;

import co.edu.uniandes.tours.services.DslGrammarAccess;
import co.edu.uniandes.tours.tours.Hotspot;
import co.edu.uniandes.tours.tours.Panorama;
import co.edu.uniandes.tours.tours.Position;
import co.edu.uniandes.tours.tours.Rotation;
import co.edu.uniandes.tours.tours.Tour;
import co.edu.uniandes.tours.tours.ToursPackage;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ToursPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ToursPackage.HOTSPOT:
				sequence_Hotspot(context, (Hotspot) semanticObject); 
				return; 
			case ToursPackage.PANORAMA:
				sequence_Panorama(context, (Panorama) semanticObject); 
				return; 
			case ToursPackage.POSITION:
				sequence_Position(context, (Position) semanticObject); 
				return; 
			case ToursPackage.ROTATION:
				sequence_Rotation(context, (Rotation) semanticObject); 
				return; 
			case ToursPackage.TOUR:
				sequence_Tour(context, (Tour) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Hotspot returns Hotspot
	 *
	 * Constraint:
	 *     (name=EString to=[Panorama|ID] position=Position rotation=Rotation)
	 */
	protected void sequence_Hotspot(ISerializationContext context, Hotspot semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ToursPackage.Literals.HOTSPOT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursPackage.Literals.HOTSPOT__NAME));
			if (transientValues.isValueTransient(semanticObject, ToursPackage.Literals.HOTSPOT__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursPackage.Literals.HOTSPOT__TO));
			if (transientValues.isValueTransient(semanticObject, ToursPackage.Literals.HOTSPOT__POSITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursPackage.Literals.HOTSPOT__POSITION));
			if (transientValues.isValueTransient(semanticObject, ToursPackage.Literals.HOTSPOT__ROTATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursPackage.Literals.HOTSPOT__ROTATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHotspotAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getHotspotAccess().getToPanoramaIDTerminalRuleCall_7_0_1(), semanticObject.eGet(ToursPackage.Literals.HOTSPOT__TO, false));
		feeder.accept(grammarAccess.getHotspotAccess().getPositionPositionParserRuleCall_11_0(), semanticObject.getPosition());
		feeder.accept(grammarAccess.getHotspotAccess().getRotationRotationParserRuleCall_15_0(), semanticObject.getRotation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Panorama returns Panorama
	 *
	 * Constraint:
	 *     (name=EString description=STRING hotspots+=Hotspot hotspots+=Hotspot*)
	 */
	protected void sequence_Panorama(ISerializationContext context, Panorama semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Position returns Position
	 *
	 * Constraint:
	 *     (posx=EDouble posy=EDouble posz=EDouble)
	 */
	protected void sequence_Position(ISerializationContext context, Position semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ToursPackage.Literals.POSITION__POSX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursPackage.Literals.POSITION__POSX));
			if (transientValues.isValueTransient(semanticObject, ToursPackage.Literals.POSITION__POSY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursPackage.Literals.POSITION__POSY));
			if (transientValues.isValueTransient(semanticObject, ToursPackage.Literals.POSITION__POSZ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursPackage.Literals.POSITION__POSZ));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPositionAccess().getPosxEDoubleParserRuleCall_3_0(), semanticObject.getPosx());
		feeder.accept(grammarAccess.getPositionAccess().getPosyEDoubleParserRuleCall_7_0(), semanticObject.getPosy());
		feeder.accept(grammarAccess.getPositionAccess().getPoszEDoubleParserRuleCall_11_0(), semanticObject.getPosz());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Rotation returns Rotation
	 *
	 * Constraint:
	 *     (posx=EDouble posy=EDouble posz=EDouble)
	 */
	protected void sequence_Rotation(ISerializationContext context, Rotation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ToursPackage.Literals.ROTATION__POSX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursPackage.Literals.ROTATION__POSX));
			if (transientValues.isValueTransient(semanticObject, ToursPackage.Literals.ROTATION__POSY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursPackage.Literals.ROTATION__POSY));
			if (transientValues.isValueTransient(semanticObject, ToursPackage.Literals.ROTATION__POSZ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToursPackage.Literals.ROTATION__POSZ));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRotationAccess().getPosxEDoubleParserRuleCall_3_0(), semanticObject.getPosx());
		feeder.accept(grammarAccess.getRotationAccess().getPosyEDoubleParserRuleCall_7_0(), semanticObject.getPosy());
		feeder.accept(grammarAccess.getRotationAccess().getPoszEDoubleParserRuleCall_11_0(), semanticObject.getPosz());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Tour returns Tour
	 *
	 * Constraint:
	 *     (name=EString panoramas+=Panorama panoramas+=Panorama*)
	 */
	protected void sequence_Tour(ISerializationContext context, Tour semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
